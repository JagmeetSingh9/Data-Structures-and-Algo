Q. Reverse the First K Elements in the Queue

For a given queue containing all integer data, reverse the first K elements.
You have been required to make the desired change in the input queue itself.




Input Format :
The first line of input would contain two integers N and K, separated by a single space. They denote the total number of elements in the queue and the count with which the elements need to be reversed respectively.

The second line of input contains N integers separated by a single space, representing the order in which the elements are enqueued into the queue.
Output Format:
The only line of output prints the updated order in which the queue elements are dequeued, all of them separated by a single space. 
Note:
You are not required to print the expected output explicitly, it has already been taken care of. Just make the changes in the input queue itself.
Contraints :
1 <= N <= 10^6
1 <= K <= N
-2^31 <= data <= 2^31 - 1

Sample Input 1:
5 3
1 2 3 4 5
Sample Output 1:
3 2 1 4 5
Sample Input 2:
7 7
3 4 2 5 6 7 8
Sample Output 2:
8 7 6 5 2 4 3/*Q. Reverse the First K Elements in the Queue

For a given queue containing all integer data, reverse the first K elements.
You have been required to make the desired change in the input queue itself.




Input Format :
The first line of input would contain two integers N and K, separated by a single space. They denote the total number of elements in the queue and the count with which the elements need to be reversed respectively.

The second line of input contains N integers separated by a single space, representing the order in which the elements are enqueued into the queue.
Output Format:
The only line of output prints the updated order in which the queue elements are dequeued, all of them separated by a single space. 
Note:
You are not required to print the expected output explicitly, it has already been taken care of. Just make the changes in the input queue itself.
Contraints :
1 <= N <= 10^6
1 <= K <= N
-2^31 <= data <= 2^31 - 1

Sample Input 1:
5 3
1 2 3 4 5
Sample Output 1:
3 2 1 4 5
Sample Input 2:
7 7
3 4 2 5 6 7 8
Sample Output 2:
8 7 6 5 2 4 3*/
package classques;

import java.util.*;
//using array

class queuee {

    static int front, rear, size;
    static int arr[];

    queuee(int size) {
        front = rear = 0;
        this.size = size;
        arr = new int[size];
    }

    // insert an element into the queue
    static void Enqueue(int data) {
        // check if the queue is full
        if (size == rear) {
            System.out.printf("\nQueue is full\n");
            return;
        }

        // insert element at the rear
        else {
            arr[rear] = data;
            rear++;
        }
        return;
    }

    static void Display() {
        int i;
        if (front == rear) {
            System.out.printf("Queue is Empty\n");
            return;
        }

        // traverse front to rear and print elements
        for (i = front; i < rear; i++) {
            System.out.printf(" %d , ", arr[i]);
        }
        return;
    }

    static void reverse_elements(int t) {
        for (int i = t - 1; i >= 0; i--) {
            System.out.print(arr[i] + ", ");
        }
        if (t != size) {
            for (int i = t; i < size; i++) {
                System.out.print(" " + arr[i] + " , ");
            }
        }
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        queuee q = new queuee(5);
        int k = sc.nextInt();
        q.Enqueue(5);
        q.Enqueue(10);
        q.Enqueue(7);
        q.Enqueue(4);
        q.Enqueue(8);
        // q.Enqueue(10);
        q.Display();
        System.out.println();
        q.reverse_elements(k);

        sc.close();
    }
}
